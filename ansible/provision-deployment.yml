---
- name: Build the Cloud Environment
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - ./vars/everything.yml
    - ./vars/secrets.yml
  tasks:
    - name: Create the VPC
      ec2_vpc_net:
        region: "{{ cloud_config.region }}"
        cidr_block: "{{ cloud_config.vpc_cidr }}"
        name: "{{ cloud_config.vpc_name }}"
        tags:
          service: "{{ cluster_name }}"
        state: present
      register: cluster_vpc
    - name: Create the Subnet
      ec2_vpc_subnet:
        region: "{{ cloud_config.region }}"
        az: "{{ item.zone }}"
        vpc_id: "{{ cluster_vpc.vpc.id }}"
        cidr: "{{ item.subnet_cidr }}"
        resource_tags:
          Name: "{{ item.subnet_name }}"
        state: present
      with_items: "{{ cloud_config.subnets }}"
      register: cluster_subnet
    - name: Add an Internet Gateway to the VPC
      ec2_vpc_igw:
        region: "{{ cloud_config.region }}"
        vpc_id: "{{ cluster_vpc.vpc.id }}"
        state: present
      when: cloud_config.internet_gateway
      register: cluster_igw
    - name: lookup route tables
      ec2_vpc_route_table:
        region: "{{ cloud_config.region }}"
        filters:
          tag:Name: everyshilling
      register: check_route_table
      ignore_errors: true
    - debug: msg="{{ check_route_table }}"
    - debug: msg="{{ cluster_subnet.results[0]['subnet'] }}"
    - name: Set up the public subnet route table for the Internet Gateway
      block:
        - ec2_vpc_route_table:
            tags:
              Name: everyshilling
            region: "{{ cloud_config.region }}"
            vpc_id: "{{ cluster_vpc.vpc.id }}"
            subnets:
              - "{{ cloud_config.subnets[0].subnet_cidr }}"
              - "{{ cloud_config.subnets[1].subnet_cidr }}"
              - "{{ cloud_config.subnets[2].subnet_cidr }}"
            routes:
              - dest: 0.0.0.0/0
                gateway_id: "{{ cluster_igw.gateway_id }}"
            state: present
      when: cluster_igw.gateway_id is defined and check_route_table
    - name: Create Security Groups
      ec2_group:
        region: "{{ cloud_config.region }}"
        name: "{{ item.name }}"
        vpc_id: "{{ cluster_vpc.vpc.id }}"
        description: "{{ item.description }}"
        purge_rules: false
        purge_rules_egress: false
        rules: "{{ item.rules }}"
      with_items: "{{ cloud_config.security_groups }}"
      register: cluster_security_groups

    # - name: Docker login (must `--no-include-email`)
    #   shell: "{{ lookup('env','HOME') }}/.local/bin/aws ecr get-login-password
    #     --region {{ cloud_config.region }} | docker login --username AWS
    #     --password-stdin {{ cloud_config.registry }}"
    #   args:
    #     executable: /bin/bash

    # - name: Docker login (must `--no-include-email`)
    #   shell: "$(aws ecr get-login --region {{ cloud_config.region }} --no-include-email)"
    #   args:
    #     executable: /bin/bash

    - name: Tag local image to push to ecr
      docker_image:
        name: "{{ image_name }}:{{ image_version }}"
        repository: "{{ ecr_repo.repository.repositoryUri }}"
        tag: "{{ ecr_repo.repository.repositoryUri }}:{{ image_version }}"

    - name: Push image to ecr
      docker_image:
        name: "{{ ecr_repo.repository.repositoryUri }}:{{ image_version }}"
        push: yes

    - name: Setup ECS cluster
      ecs_cluster:
        name: "{{ cluster_name }}"
        state: present
        region: "{{ cloud_config.region }}"
    - name: Create a policy
      iam_policy:
        iam_type: role
        iam_name: fargate-ecs
        policy_name: fargate-ecs
        policy_json: " {{ lookup( 'file', './vars/policy.json') }} "
        state: present
    - name: Create a role
      iam_role:
        name: fargate-ecs
        assume_role_policy_document: "{{ lookup('file','./vars/role.json') }}"
        description: Allows ECS tasks to call AWS services on your behalf.
      register: ecs_role
    - name: Create a log group for the logs
      cloudwatchlogs_log_group:
        retention: 30
        region: "{{ cloud_config.region }}"
        state: present
        log_group_name: "{{ cluster_name }}"
    - name: Lookup http security group by name
      ec2_group:
        region: "{{ cloud_config.region }}"
        filters:
          group-name: everyshilling
      register: http_security_group
    - name: Lookup VPC by tags
      ec2_vpc_net:
        filters:
          tag:service: "{{ cluster_name }}"
      register: everyshilling
    - name: create ECS cluster
      ecs_cluster:
        name: "{{ cluster_name }}"
        state: present
        region: "{{ cloud_config.region }}"
      register: result
    - debug: msg="{{ result }}"
    - name: Create task definition
      ecs_taskdefinition:
        family: "{{ cluster_name }}-taskdef"
        task_role_arn: "{{ ecs_role.arn }}"
        execution_role_arn: "{{ ecs_role.arn }}"
        containers:
          - name: everyshilling
            essential: true
            image: "{{ ecr_repo.repository.repositoryUri }}:{{ image_version }}"
            portMappings:
              - containerPort: 8000
                hostPort: 8000
            logConfiguration:
              logDriver: awslogs
              options:
                awslogs-group: "{{ cluster_name }}"
                awslogs-region: us-east-1
                awslogs-stream-prefix: "{{ cluster_name }}-containers"
        launch_type: FARGATE
        cpu: 512
        memory: 1GB
        state: present
        network_mode: awsvpc
    - name: Create an ECS service
      ecs_service:
        state: present
        name: "{{ cluster_name }}"
        cluster: "{{ cluster_name }}"
        task_definition: "{{ cluster_name }}-taskdef"
        launch_type: FARGATE
        load_balancers:
          - targetGroupArn: "{{ elb_target_group_facts.target_groups[0]['target_group_arn'] }}"
            containerName: everyshilling
            containerPort: 8000
        network_configuration:
          assign_public_ip: yes
          subnets:
            - "{{ cluster_subnet.results[0]['subnet']['id'] }}"
            - "{{ cluster_subnet.results[1]['subnet']['id'] }}"
            - "{{ cluster_subnet.results[2]['subnet']['id'] }}"
          security_groups:
            - "{{ http_security_group.security_groups[0]['group_id'] }}"
        desired_count: "{{ size_of_cluster }}"
        region: "{{ cloud_config.region }}"



