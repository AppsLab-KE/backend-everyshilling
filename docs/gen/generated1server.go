// Package docs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package docs

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// Email defines model for Email.
type Email struct {
	// Email valid email
	Email *string `json:"email,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// LoginCredentials defines model for LoginCredentials.
type LoginCredentials struct {
	// Email User's email address
	Email string `json:"email"`

	// Phone User's phone number
	Phone string `json:"phone"`
}

// OTP defines model for OTP.
type OTP struct {
	// OtpCode Generated OTP
	OtpCode *string `json:"otp_code,omitempty"`
}

// RegistrationResponse defines model for RegistrationResponse.
type RegistrationResponse struct {
	Email *string `json:"email,omitempty"`
	Name  *string `json:"name,omitempty"`
}

// ResetCredentials defines model for ResetCredentials.
type ResetCredentials struct {
	ConfirmPassword *string `json:"confirm_password,omitempty"`
	Password        *string `json:"password,omitempty"`
}

// Success defines model for Success.
type Success struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// User defines model for User.
type User struct {
	// Email valid email
	Email string `json:"email"`

	// Name name
	Name string `json:"name"`

	// Password strong password
	Password string `json:"password"`

	// PhoneNumber valid phone number
	PhoneNumber string `json:"phone number"`
}

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = User

// ResetJSONRequestBody defines body for Reset for application/json ContentType.
type ResetJSONRequestBody = Email

// ResetChangeJSONRequestBody defines body for ResetChange for application/json ContentType.
type ResetChangeJSONRequestBody = ResetCredentials

// ResetVerifyJSONRequestBody defines body for ResetVerify for application/json ContentType.
type ResetVerifyJSONRequestBody = OTP

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate OTP and send it to email and phone number
	// (POST /login)
	Login(c *gin.Context)
	// A POST request to registering new users
	// (POST /register)
	Register(c *gin.Context)
	// Send password reset OTP
	// (POST /reset)
	Reset(c *gin.Context)
	// Change Password
	// (POST /reset/{request-id}/change)
	ResetChange(c *gin.Context, requestId string)
	// Verify OTP
	// (POST /reset/{request-id}/verify)
	ResetVerify(c *gin.Context, requestId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Login(c)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Register(c)
}

// Reset operation middleware
func (siw *ServerInterfaceWrapper) Reset(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Reset(c)
}

// ResetChange operation middleware
func (siw *ServerInterfaceWrapper) ResetChange(c *gin.Context) {

	var err error

	// ------------- Path parameter "request-id" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "request-id", c.Param("request-id"), &requestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter request-id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ResetChange(c, requestId)
}

// ResetVerify operation middleware
func (siw *ServerInterfaceWrapper) ResetVerify(c *gin.Context) {

	var err error

	// ------------- Path parameter "request-id" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "request-id", c.Param("request-id"), &requestId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter request-id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ResetVerify(c, requestId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/login", wrapper.Login)

	router.POST(options.BaseURL+"/register", wrapper.Register)

	router.POST(options.BaseURL+"/reset", wrapper.Reset)

	router.POST(options.BaseURL+"/reset/:request-id/change", wrapper.ResetChange)

	router.POST(options.BaseURL+"/reset/:request-id/verify", wrapper.ResetVerify)

	return router
}
