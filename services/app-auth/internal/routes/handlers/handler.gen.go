// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package handlers

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Generate OTP and send it to email and phone number
	// (POST /login/)
	Login(c *gin.Context)
	// Verify the OTP
	// (POST /login/{tracking-uuid}/verify)
	VerifyLoginOTP(c *gin.Context, trackingUuid string)
	// A POST request to registering new users
	// (POST /register)
	Register(c *gin.Context)
	// Send password reset OTP
	// (POST /reset)
	Reset(c *gin.Context)
	// Change Password
	// (POST /reset/{tracking-uuid}/change)
	ChangePassword(c *gin.Context, trackingUuid string)
	// Verify OTP
	// (POST /reset/{tracking-uuid}/verify)
	VerifyResetOTP(c *gin.Context, trackingUuid string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Login(c)
}

// VerifyLoginOTP operation middleware
func (siw *ServerInterfaceWrapper) VerifyLoginOTP(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.VerifyLoginOTP(c, trackingUuid)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Register(c)
}

// Reset operation middleware
func (siw *ServerInterfaceWrapper) Reset(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Reset(c)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ChangePassword(c, trackingUuid)
}

// VerifyResetOTP operation middleware
func (siw *ServerInterfaceWrapper) VerifyResetOTP(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.VerifyResetOTP(c, trackingUuid)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/login/", wrapper.Login)

	router.POST(options.BaseURL+"/login/:tracking-uuid/verify", wrapper.VerifyLoginOTP)

	router.POST(options.BaseURL+"/register", wrapper.Register)

	router.POST(options.BaseURL+"/reset", wrapper.Reset)

	router.POST(options.BaseURL+"/reset/:tracking-uuid/change", wrapper.ChangePassword)

	router.POST(options.BaseURL+"/reset/:tracking-uuid/verify", wrapper.VerifyResetOTP)

	return router
}
