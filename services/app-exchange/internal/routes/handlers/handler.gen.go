// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package handlers

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Account Overview
	// (GET /account-overview)
	GetAccountOverview(c *gin.Context)
	// Generate OTP and send it to email and phone number
	// (POST /auth/login)
	Login(c *gin.Context)
	// Resend login OTP
	// (GET /auth/login/otp/{tracking-uuid}/resend)
	ResendLoginOTP(c *gin.Context, trackingUuid string)
	// Verify the OTP
	// (POST /auth/login/otp/{tracking-uuid}/verify)
	VerifyLoginOTP(c *gin.Context, trackingUuid string)
	// Invalidation to access token and logout user
	// (GET /auth/logout)
	Logout(c *gin.Context)
	// Refresh access token using refresh token
	// (POST /auth/refresh-token)
	RefreshToken(c *gin.Context)
	// A POST request to registering new users
	// (POST /auth/register)
	Register(c *gin.Context)
	// Send password reset OTP
	// (POST /auth/reset)
	Reset(c *gin.Context)
	// Resend reset OTP
	// (GET /auth/reset/otp/{tracking-uuid}/resend)
	ResendResetOTP(c *gin.Context, trackingUuid string)
	// Verify OTP
	// (POST /auth/reset/otp/{tracking-uuid}/verify)
	VerifyResetOTP(c *gin.Context, trackingUuid string)
	// Change Password
	// (POST /auth/reset/{tracking-uuid}/change)
	ChangePassword(c *gin.Context, trackingUuid string)
	// Verify phone number
	// (POST /auth/verify)
	VerifyPhone(c *gin.Context)
	// Resend verification OTP
	// (GET /auth/verify/otp/{tracking-uuid}/resend)
	ResendVerificationOTP(c *gin.Context, trackingUuid string)
	// Verify OTP
	// (POST /auth/verify/otp/{tracking-uuid}/verify)
	VerifyVerificationOTP(c *gin.Context, trackingUuid string)
	// Buy Currencies
	// (POST /buy-currency)
	PostBuyCurrency(c *gin.Context)
	// Marketplace Offers
	// (GET /marketplace-offers)
	GetMarketplaceOffers(c *gin.Context)
	// Top up Account
	// (POST /top-up-account)
	PostTopUpAccount(c *gin.Context)
	// A GET request to /users/{userId}
	// (GET /users/{userId}/show)
	GetUserById(c *gin.Context, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccountOverview operation middleware
func (siw *ServerInterfaceWrapper) GetAccountOverview(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAccountOverview(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Login(c)
}

// ResendLoginOTP operation middleware
func (siw *ServerInterfaceWrapper) ResendLoginOTP(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ResendLoginOTP(c, trackingUuid)
}

// VerifyLoginOTP operation middleware
func (siw *ServerInterfaceWrapper) VerifyLoginOTP(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.VerifyLoginOTP(c, trackingUuid)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	c.Set(BearerScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Logout(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.RefreshToken(c)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Register(c)
}

// Reset operation middleware
func (siw *ServerInterfaceWrapper) Reset(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Reset(c)
}

// ResendResetOTP operation middleware
func (siw *ServerInterfaceWrapper) ResendResetOTP(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ResendResetOTP(c, trackingUuid)
}

// VerifyResetOTP operation middleware
func (siw *ServerInterfaceWrapper) VerifyResetOTP(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.VerifyResetOTP(c, trackingUuid)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ChangePassword(c, trackingUuid)
}

// VerifyPhone operation middleware
func (siw *ServerInterfaceWrapper) VerifyPhone(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.VerifyPhone(c)
}

// ResendVerificationOTP operation middleware
func (siw *ServerInterfaceWrapper) ResendVerificationOTP(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ResendVerificationOTP(c, trackingUuid)
}

// VerifyVerificationOTP operation middleware
func (siw *ServerInterfaceWrapper) VerifyVerificationOTP(c *gin.Context) {

	var err error

	// ------------- Path parameter "tracking-uuid" -------------
	var trackingUuid string

	err = runtime.BindStyledParameter("simple", false, "tracking-uuid", c.Param("tracking-uuid"), &trackingUuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tracking-uuid: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.VerifyVerificationOTP(c, trackingUuid)
}

// PostBuyCurrency operation middleware
func (siw *ServerInterfaceWrapper) PostBuyCurrency(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostBuyCurrency(c)
}

// GetMarketplaceOffers operation middleware
func (siw *ServerInterfaceWrapper) GetMarketplaceOffers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetMarketplaceOffers(c)
}

// PostTopUpAccount operation middleware
func (siw *ServerInterfaceWrapper) PostTopUpAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostTopUpAccount(c)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", c.Param("userId"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUserById(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/account-overview", wrapper.GetAccountOverview)

	router.POST(options.BaseURL+"/auth/login", wrapper.Login)

	router.GET(options.BaseURL+"/auth/login/otp/:tracking-uuid/resend", wrapper.ResendLoginOTP)

	router.POST(options.BaseURL+"/auth/login/otp/:tracking-uuid/verify", wrapper.VerifyLoginOTP)

	router.GET(options.BaseURL+"/auth/logout", wrapper.Logout)

	router.POST(options.BaseURL+"/auth/refresh-token", wrapper.RefreshToken)

	router.POST(options.BaseURL+"/auth/register", wrapper.Register)

	router.POST(options.BaseURL+"/auth/reset", wrapper.Reset)

	router.GET(options.BaseURL+"/auth/reset/otp/:tracking-uuid/resend", wrapper.ResendResetOTP)

	router.POST(options.BaseURL+"/auth/reset/otp/:tracking-uuid/verify", wrapper.VerifyResetOTP)

	router.POST(options.BaseURL+"/auth/reset/:tracking-uuid/change", wrapper.ChangePassword)

	router.POST(options.BaseURL+"/auth/verify", wrapper.VerifyPhone)

	router.GET(options.BaseURL+"/auth/verify/otp/:tracking-uuid/resend", wrapper.ResendVerificationOTP)

	router.POST(options.BaseURL+"/auth/verify/otp/:tracking-uuid/verify", wrapper.VerifyVerificationOTP)

	router.POST(options.BaseURL+"/buy-currency", wrapper.PostBuyCurrency)

	router.GET(options.BaseURL+"/marketplace-offers", wrapper.GetMarketplaceOffers)

	router.POST(options.BaseURL+"/top-up-account", wrapper.PostTopUpAccount)

	router.GET(options.BaseURL+"/users/:userId/show", wrapper.GetUserById)

	return router
}
